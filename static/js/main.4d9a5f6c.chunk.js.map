{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","console","log","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"4MAIA,SAASA,EAAQC,GACb,OACE,yBACAC,UAAU,SACVC,QAASF,EAAME,QAFf,UAIGF,EAAMG,MAJT,IAIiBC,QAAQC,IAAI,+BAA+BL,EAAMG,U,IAKlEG,E,kKAuBJ,SAAaC,GAAI,IAAD,OAEd,OADAH,QAAQC,IAAI,yCAAyCG,KAAKR,MAAMS,QAAQF,IAEtE,cAACR,EAAD,CACEI,MAAOK,KAAKR,MAAMS,QAAQF,GAC1BL,QAAS,kBACP,EAAKF,MAAME,QAAQK,Q,oBAK3B,WACE,OACE,gCACE,sBAAKN,UAAU,YAAf,UACGO,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKT,UAAU,YAAf,UACGO,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKT,UAAU,YAAf,UACGO,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GAlDTC,IAAMC,WAyDpBC,E,kDACJ,WAAYb,GAAO,IAAD,8BAChB,cAAMA,IACCc,MAAQ,CACXC,QAAS,CAAC,CACRN,QAASO,MAAM,GAAGC,KAAK,QAEzBC,WAAY,EACZC,SAAS,GAPG,E,+CAUlB,SAAYZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACvBf,QAASA,KAEXS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,oBAIzB,SAAOM,GACLjB,KAAKe,SAAS,CACZL,WAAYO,EACZN,QAAUM,EAAK,IAAO,M,oBAG1B,WAAU,IAiBNC,EAjBK,OACDX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EACNN,EAAgBK,EAAQlB,SAElBoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EACb,eAAiBA,EACjB,cACF,OACE,6BACE,wBAAQ7B,QAAS,kBACf,EAAK+B,OAAOF,IADd,SACsBC,KAFfD,MAYX,OAJEL,EADCE,EACQ,SAAWA,EAEX,iBAAmBpB,KAAKM,MAAMK,QAAU,IAAM,KAGvD,sBAAKlB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACK,EAAD,CACAG,QAASkB,EAAQlB,QACjBP,QAAS,SAACK,GAAD,OAAO,EAAK2B,YAAY3B,QAGnC,sBAAKN,UAAU,YAAf,UACE,8BAAMyB,IACN,6BAAKG,c,GAnEIlB,IAAMC,WAiFzB,SAASU,EAAgBb,GAWvB,IAVA,IAAM0B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA5B,EAAI,EAAGA,EAAI4B,EAAMd,OAAQd,IAAK,CACrC,kBAAkB4B,EAAM5B,GAAxB,GAAO6B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IAAM5B,EAAQ2B,KAAO3B,EAAQ6B,GACpE,OAAO7B,EAAQ2B,GAGnB,OAAO,KAtBTG,IAASC,OACP,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.4d9a5f6c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square (props){\n    return (\n      <button \n      className=\"square\" \n      onClick={props.onClick}\n      >\n        {props.value} {console.log('button onClick handler props',props.value)}\n      </button>\n    );\n  }\n\nclass Board extends React.Component {\n  // constructor(props){\n  //   super(props);\n  //   this.state = {\n  //     squares: Array(9).fill(null),\n  //     xIsNext: true,\n  //   };\n  // }\n  // handleClick(i){\n  //   const history = this.state.history;\n  //   const current = history[history.length - 1];\n  //   const squares = current.squares.slice();\n  //   if(calculateWinner(squares) || squares[i]){\n  //     return;\n  //   }\n  //   squares[i] = this.state.xIsNext ? 'X' : 'O';\n  //   this.setState({\n  //     history: history.concat([{\n  //       squares: squares,\n  //     }]),\n  //     xIsNext: !this.state.xIsNext,\n  //   });\n  // }\n  renderSquare(i) {\n    console.log('insiede of Square, renderSquare method',this.props.squares[i])\n    return (\n      <Square  \n        value={this.props.squares[i]}\n        onClick={() => \n          this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props)\n      this.state = {\n        history: [{\n          squares: Array(9).fill(null),\n        }],\n        stepNumber: 0,\n        xIsNext: true,\n      };\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step){\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step%2) === 0,\n    })\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber]\n    const winner = \n    calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? \n      'Go to move #' + move : \n      'Go to start';\n    return(\n      <li key={move}>\n        <button onClick={() => \n          this.jumpTo(move)}>{desc}</button>\n      </li>\n    );\n  });\n  let status;\n    if(winner){\n      status = 'Winner' + winner;\n    }else{\n      status = 'Next Player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n          squares={current.squares}\n          onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"sourceRoot":""}